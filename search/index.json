[{"content":" 1 2 3 4 5 6 7 8 9 10 interface ITextSummarizer{ string summarizeText(string text); } class TextSummarizer : ITextSummarizer{ string summarizeText(string text){ //do something return \u0026#34;summarize text\u0026#34;; } } 雖然 TextSummarizer 只有一個實作，就算之後不會有另一個實作，加上 interface 也有其他好處。\n定義 interface 的優點：\n可以使測試更容易 - 如果要在測試期間使用 mock 或 fake 假的實作，會需要定義一個介面來執行此操作。 讓公用 API 更清晰 - 使用端應該或不應該使用哪些功能不會產生混淆。 有可能猜錯只需要一個實作 - 最初寫程式時可能確定真的不需要第二個實作，但經過一兩個月後，這個假設可能被證明是錯誤的。 同一類別可以解決兩個子問題 - 有時某個類別可以為兩個或多個不同的抽象層提供實作。例如 LinkedList 實作類別可以實作 List 和 Queue 介面。 定義 interface 的缺點：\n需要付出更多努力 - 如果沒有 IDE 的幫忙，可能要手動多寫幾行程式碼。 -\u0026gt; 使用 Rider 自動產生 Interface Reference\nGood Code, Bad Code｜寫出高品質的程式碼 PART 1 理論篇 - 第2章 抽象層\n","date":"2022-08-07T00:00:00Z","permalink":"https://blog.sheu.pw/p/why-add-interface/","title":"所有的 Class 都要加 Interface 嗎?"},{"content":"\nhello world! Hugo\n","date":"2022-07-31T00:00:00Z","image":"https://blog.sheu.pw/p/hugo-start/hugo-logo.svg","permalink":"https://blog.sheu.pw/p/hugo-start/","title":"Hugo start"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 interface IAlertService { void SendAlert(string message) } public class SlackAlertService : IAlertService { public void SendAlert(string message){} } public class TelegramAlertService : IAlertService { public void SendAlert(string message){} } 假如有個 TestAlertService 需要同時使用到 SlackAlertService 和 TelegramAlertService ，在使用 autofac 注入時因為兩個 service 都使用相同的介面，這個時候可以透過加上 KeyFilter attribute 的方式來指定所需要的實體。\nKeyFilter 的使用方式：\n1 2 3 4 5 6 public class TestAlertService : IAlertService { public TestAlertService([KeyFilter(\u0026#34;slack\u0026#34;)] IAlertService slackAlert, [KeyFilter(\u0026#34;telegram\u0026#34;)] IAlertService slackAlert){ ... } } 在註冊時需要透過設定好的 key 去指定相對應的實作，以及設定哪個類別要使用 attribute filter：\n1 2 3 4 builder.RegisterType\u0026lt;SlackAlertService\u0026gt;().Keyed\u0026lt;IAlertService\u0026gt;(\u0026#34;slack\u0026#34;); builder.RegisterType\u0026lt;TelegramAlertService\u0026gt;().Keyed\u0026lt;IAlertService\u0026gt;(\u0026#34;telegram\u0026#34;); builder.RegisterType\u0026lt;TestAlertService\u0026gt;().As\u0026lt;IAlertService\u0026gt;().WithAttributeFiltering(); 參考資料：[Autofac] resolving with attributes\n","date":"2022-07-22T00:00:00Z","permalink":"https://blog.sheu.pw/p/autofac-keyfilter-attribute/","title":"使用 Autofac KeyFilter Attribute 在相同介面注入不同實體"},{"content":"on Windows 2012 (IIS 8)\n選擇想要檢視的 IIS Worker Process\n切到 detail 查看該 process 的 PID\n切換到 C:\\Windows\\System32\\inetsrv ，執行 .\\appcmd.exe list wp 找到對應的 PID\n","date":"2021-09-02T00:00:00Z","permalink":"https://blog.sheu.pw/p/%E5%A6%82%E4%BD%95%E6%9F%A5%E8%A9%A2-w3wp.exe-%E5%B0%8D%E6%87%89%E7%9A%84-iis-application-pool/","title":"如何查詢 w3wp.exe 對應的 IIS Application Pool"},{"content":"某天逛 Facebook 突然發現有個「中文化電子郵件信箱體驗活動」，只要動動手指就可以體驗看起來很狂的中文信箱地址，而且還附贈該中文網域名稱一年，就趕緊就來申請囉。\n在經過很多步驟和教學後，終於拿到了成功獲得域名通知信，信中給了個連結可以設定管理網域的判別密碼。\n可以看到設定判別密碼的網址帶了兩個參數 key 及 dn，key 是一串亂碼，而 dn 則是個人中文網域名稱 (灰色方塊部分)。\n-\u0026gt;透過此網址可重複修改密碼\n接著就收到一封邀請好友的信件，點擊信中連結輸入好友 Gmail 信箱，成功推廣可以有抽獎點數。\n但點進去推廣頁面，看了網址所帶的參數覺得怎麼有種似曾相識的感覺？\n推廣頁面和設定密碼的頁面所使用的 key 竟然是同一把！\n如果任何人知道你的中文網域名稱及邀請頁面連結，代入 KEY 及 網域名稱 到設定密碼頁面，即可修改他人的判別密碼。\nhttps://rs.twnic.net.tw/cgi-bin/eai/chgpass.cgi?key= {KEY} \u0026amp;dn= {網域名稱}.台灣\n用修改後的密碼登入就可以取得原域名擁有者的所有權限，可以更改 DNS 設定、查看或修改個人資料等等。\n如果你公布了你的網域名稱，順便附上信中的推廣連結，等於是告訴人：來吧，可以幫我改密碼喔。\n為了避免關鍵 key 外流，我推廣好友自己打 Gmail 信箱總安全了吧，這樣想就大錯特錯了！\n就算自己打信箱推廣，被推廣好友所收到確認信所含連結也有那把可以重設密碼的 key (右下黃色區塊)。總之，如果要推廣好友，絕對不能把我的網域名稱告訴他人，不然他就能幫忙改密碼並接管自己的個人網域了。\n-\u0026gt;同一人所發出邀請 key 皆相同，參數 rec 不同被推廣者皆不相同。\n之後把情況詳情回報給台灣網路資訊中心，當天幾小時後重設密碼的頁面就自動跳轉到 https://rs.twnic.net.tw/cgi-bin/eai/chgpass.cgi 乾淨的網址，改成用 Form Data 的形式送出 key \u0026amp; dn，暫時先改變資料送出的形式，把漏洞變得比較不明顯。\n幸好隔天重設密碼的流程就換了，改成只回傳一個\u0026lt;script\u0026gt; alert，提示至信箱確認變更密碼連結，他人就不再能簡單取得個人網域權限了，當天的修改貌似只是不想讓更多人能一眼就發現並使用這個漏洞。\n設定密碼的頁面所使用的 key (灰色部分) 終於不是那組連推廣都共用的那把了。\n查了一下此活動開始也有一段時間了，不過看起來還沒有人發現。為了避免更多資料外洩，當天即送出了問題回報，他們也非常快速的解決了問題，在隔天即修復完成。除了讓人佩服工程師的努力外，正面面對漏洞修補的態度也值得讚賞。\n這個問題的根本原因就是重設密碼所用的 token 也被其他服務所使用，而該推廣中文域名活動的服務剛好會讓 token 流出給第三者，而讓外人可以輕易取得域名管理權限。\n其實只要多留意並不難發現這個漏洞，但它還是存在了幾個禮拜的時間，這也說明了網路上並不是沒有漏洞，而是缺少發現。身為使用者可以多仔細觀察，協助政府或企業發現問題。而開發者則要注意並不是使用亂數當 token 就安全，也要注意在設定密碼這種比較敏感的服務和其他一般服務所使用的 token 必須要有所區隔。\n時間軸：\n2017/3/30：漏洞詳情回報給財團法人台灣網路資訊中心 2017/3/31：修復了此漏洞 本文同步刊載於 HITCON Knowledge Base in 2017.04\n","date":"2021-03-10T00:00:00Z","permalink":"https://blog.sheu.pw/p/%E5%8F%B0%E7%81%A3%E7%B6%B2%E8%B7%AF%E8%B3%87%E8%A8%8A%E4%B8%AD%E5%BF%83-%E5%9F%9F%E5%90%8D%E7%AE%A1%E7%90%86%E9%97%9C%E9%8D%B5-key-%E5%85%B1%E7%94%A8%E6%BC%8F%E6%B4%9E/","title":"台灣網路資訊中心 域名管理關鍵 Key 共用漏洞"}]